slug: blur-me
title: "블러미 이미지 & 영상 비식별화 웹 페이지"
description: "AI로 사람, 얼굴, 차량, 번호판을 인식하여 쉽고 빠르게 블러 처리를 해주는 서비스입니다. 별도의 프로그램 설치 없이 웹에서 모든 처리가 가능하며, 글로벌 서비스로 다양한 국가에서 접속하여 사용하고 있습니다."
feature_image: "https://res.cloudinary.com/dtcwegdlw/image/upload/v1738817405/blur-me.png"
feature_image_alt: "blur-me"
period: "2022년 7월 ~ now"
website: "https://www.blur.me"
github: null
sections:
  - title: null
    contents:
    - 처음으로 자사 서비스 개발을 경험했습니다. 기존에 진행했던 외주 프로젝트와 달리 서비스 운영과 최적화까지 직접 책임감 있게 진행했습니다.
    - 단순한 기능 구현이 아닌, 유지보수성과 확장성을 고려한 코드 구조, 가독성 좋은 코드가 왜 중요한지 깊이 이해하게 되었습니다.
    - Next.js 13을 기반으로 다국어 지원, Strapi CMS 도입, 코드 품질 개선, SEO 최적화, 모노레포 구성, 공용 컴포넌트 개발 등 다양한 기술을 경험했습니다.
    - 블러미 서비스를 운영하고 개발하며 더 나은 아키텍처와 효율적인 개발 프로세스를 고민할 수 있었고, 이를 통해 한층 성장한 개발자가 될 수 있었습니다. 앞으로도 단순한 입력이 아닌, 깊이 있는 고민을 바탕으로 효율적인 개발을 지향하며 성장해 나아갈 것입니다.

  - title: Next.js 13 신규 기능 및 12 이전 버전 변경점 발표
    contents:
    - Milestone v2에서 v3를 진행하기 전, Next.js 13이 출시되면서 서버 컴포넌트, App Router, 새로운 데이터 fetch 방식 등의 많은 변화로 더 효율적인 구조와 방법으로 개발하기 위해 12 버전과의 차이점을 분석할 필요가 있었습니다.
    - 이에 따라 세미나를 요청 했으며 간결하면서 핵심 내용만 전달하고 Next.js 12 버전의 CSR, SSR을 시작으로하여 기존 방식에 대한 설명을 시각적으로 표현하고 서버 컴포넌트에 대해 설명하며 장단점을 발표하였습니다.
    - 이후 팀원들에게 더 쉽게 전달하기 위해 Next.js 13 버전의 App Router 구조와 서버 컴포넌트, 새로운 데이터 Fetch 방식 등의 코드를 기반으로 Next.js 12 버전과의 차이점과 동작 결과를 보여주며 블러미에 필요한건 어떤 것이 있을지 설명했습니다.
    - 세미나 발표를 통해 기존 방식과 새로운 방식의 차이를 명확히 정리하고, 가이드를 제공함으로써 효율적으로 최신 Next.js 를 서비스에 도입할 수 있었습니다.

  - title: ESLint 및 Prettier 으로 코드 품질 개선
    contents:
    - 외주 업무를 진행할 때 코드 스타일이 일관되지 않아 유지보수에 어려움이 있었습니다.
    - 자사 서비스에서는 이를 해결하기 위해 ESLint 및 Prettier 도입을 제안하고 환경을 구성했습니다.
    - 코드 스타일이 통일되자 불필요한 코드 리뷰 시간이 사라지게 되었고 가독성이 향상된 효과를 볼 수 있었습니다.

  - title: 모노레포와 Typescript 도입 제안과 환경 구성 및 공용 컴포넌트 제작
    contents:
    - 기존에는 여러 개의 프론트엔드 프로젝트를 개별 레포지토리에서 관리하면서, 새로운 프로젝트마다 동일한 코드를 반복적으로 추가해야 했고, 공통 로직을 효율적으로 관리하기 어려운 문제가 있었습니다. 이를 해결하기 위해 모노레포와 멀티레포 방식을 비교·분석한 후, Pnpm 기반 모노레포 환경을 도입하는 방향을 제안하고 구축했습니다.
    - 기존 코드에서는 공용 컴포넌트, CMS Strapi 컴포넌트, utils 등의 Type이 명확하게 정의되지 않아 코드 분석에 많은 시간이 소요되는 문제가 있었습니다. 이에 모노레포 도입을 계기로 TypeScript를 적용하여 코드의 안정성을 높이고, 가독성을 개선하며 유지보수가 용이한 구조를 마련했습니다.
    - 그 결과, 코드 중복이 감소하고 유지보수성이 향상되었으며, 새로운 프로젝트에서도 빠르게 공용 컴포넌트를 활용할 수 있는 효율적인 개발 환경을 구축할 수 있었습니다.
    - 또한, 재사용 가능한 공용 컴포넌트를 제작하여 프로젝트 간 UI 및 로직을 통합하고, Storybook을 활용해 문서화 및 테스트 환경을 구축했습니다. Storybook을 통해 디자이너와의 협업 효율이 향상되었으며, 디자인 시안과 실제 구현된 UI 간의 차이를 빠르게 확인하고 수정할 수 있도록 했습니다. 이를 통해 개발과 디자인 간의 커뮤니케이션 비용을 줄이고, UI의 일관성을 유지할 수 있었습니다.

  - title: 다국어 환경 및 Middleware를 활용한 Redirect, Rewrite 구성
    contents:
    - Next.js 13 버전으로 변경되면서 App Router의 Segment 폴더 구조를 적용하여 다국어 환경을 구성했습니다.
    - Milestone v2에서는 번역 리소스가 체계적으로 관리되지 않아 유지보수가 어려웠습니다. 이를 해결하기 위해 Milestone v3에서는 리소스 관리 규칙을 명확하게 정의하였고, 그 결과 새로운 번역 리소스를 추가하는 속도가 향상되었으며 유지보수 또한 훨씬 용이해졌습니다.
    - 다국어 환경을 구축하는 과정에서 몇 가지 문제도 발생했습니다.
    - 글로벌 서비스에서는 일반적으로 도메인에 /en과 같은 언어 코드가 붙지 않지만, Segment 구조로 인해 language slug가 URL에 포함되는 문제가 있었습니다.
    - 사용자가 페이지를 공유할 때 https://www.blur.me 대신 https://www.blur.me/en과 같은 형태로 주소를 공유하게 된다면 깔끔하지 않으며 사용자 관점에서도 좋지 않다고 판단했습니다.
    - 이를 해결하기 위해 여러 접근 방식을 고민한 끝에 Middleware를 활용한 Redirect 및 Rewrite를 적용하여 문제를 해결했습니다.
    - 이후, 회사 홈페이지가 뉴스, 커뮤니티, SNS에서 공유될 때 도메인이 깔끔하게 노출되는 모습을 보며 뿌듯함을 느꼈습니다.

  - title: CMS Strapi 구성 및 컴포넌트 개발
    contents:
    - CMS 도입 전에는 디자인 및 다국어 리소스 수정이 필요할 때마다 개발자가 반복하여 참여 후 수정해야 했고 이로 인해 개발 일정이 지연되는 문제가 있었습니다. 이를 해결하기 위해 CMS로 Strapi를 도입하고, 재사용 가능한 공용 컴포넌트를 개발했습니다.
    - 그 결과, 서비스 운영팀이 개발자의 도움 없이도 쉽고 빠르게 리소스를 수정할 수 있게 되었으며, 공용 컴포넌트를 활용해 일관된 UI를 유지하면서도 새로운 페이지를 자유롭게 생성할 수 있는 환경을 만들었습니다.
    - 페이지 추가가 쉬워지면서 검색 엔진 유입(SEO)에도 긍정적인 영향을 미쳤습니다.

  - title: SEO 최적화 및 검색 엔진 노출 전략 수립
    contents:
    - Google Search Console을 지속적으로 모니터링하고 내부 링크 최적화 및 Sitemap 개선을 통해 검색 엔진 색인률을 향상시켰습니다. 또한, Ahrefs, Detailed SEO Extension, PageSpeed Insights 등의 도구를 활용해 검색 유입 데이터를 분석하고, 이를 바탕으로 키워드 전략을 수립하여 검색 순위를 효과적으로 개선했습니다.
    - 검색 엔진 유입 확대를 위해 AWS Lightsail 기반 Ghost 블로그 환경을 구축하고, 서비스 운영팀이 지속적으로 콘텐츠를 생산할 수 있도록 최적화된 테마를 개발했습니다. 이를 통해 콘텐츠 업데이트가 원활해지며 검색 엔진 노출 빈도가 증가했습니다.
    - 성능 최적화를 위해 코드 리팩토링을 진행하여 번들 크기를 줄이고, 불필요한 렌더링을 최소화했습니다. 또한, 이미지 최적화, 애니메이션 개선, 국가별 폰트 로딩 전략을 적용해 페이지 로딩 속도를 개선했으며, Core Web Vitals 향상을 목표로 Lighthouse 및 PageSpeed Insights를 활용해 성능을 지속적으로 점검했습니다.
    - 페이지 및 컴포넌트 단위에서 시맨틱 태그와 SEO 메타데이터를 최적화하여 검색 엔진이 콘텐츠를 정확하게 인식하도록 했습니다. 이를 통해 검색 순위 상승과 함께 접근성을 개선했으며, 검색 엔진이 페이지 구조를 효과적으로 이해할 수 있도록 했습니다.
    - 그 결과, SEO 개선 전 월 클릭 수 10.8K → 13.2K, 노출 수 110K → 138K로 증가하며, 사이트 유입률이 22% 향상되는 성과를 거뒀습니다.

  - title: Recoil Loadable을 활용한 비동기 처리 Hook 구현 (Suspense, CSR Smooth Update)
    contents:
    - Recoil의 Loadable 기능을 활용하여 비동기 상태 관리를 보다 직관적이고 안정적으로 구현하고자 했습니다.
    - 비동기 데이터를 처리할 때 로딩 상태 관리가 일관되지 않았으며, CSR 환경에서는 초기 렌더링 시 데이터가 아직 로드되지 않아 UI가 깜빡이거나 부드럽지 않게 전환되는 문제가 있었습니다. 이를 해결하기 위해 useRecoilValueLoadable을 사용하여 Suspense 기반 환경과 CSR 환경을 모두 지원하는 Custom Hook을 제작했습니다.
    - Suspense로 감싸진 경우에는 스켈레톤 UI를 적용하여 로딩 상태를 효과적으로 관리하고, CSR 환경에서는 Hydration 이후 부드러운 데이터 갱신이 가능하도록 처리했습니다. 이를 통해 초기 렌더링 성능이 개선되었고, 데이터 요청이 많은 페이지에서도 보다 최적화된 렌더링이 이루어져 사용자 경험이 향상되었습니다.

  - title: 스튜디오 UI 개선 Floating Action Button(FAB) 도입
    contents:
      - Milestone v3 기획 단계에서 헬프 센터, 언어 변경, 문의하기와 같은 기능의 배치를 신중하게 고민해야 했습니다. 사용성이 저하될 수 있었기 때문에 핵심 기능에 방해되지 않는 사용성이 중요한 요소였습니다.
      - 헬프 센터와 문의하기는 사용자 편의성을 높였지만, 워크스페이스나 헤더에 배치하기에는 다른 요소를 방해할 가능성이 있었습니다.
      - Milestone v2 에서 사용자 문의가 많았고, 다음 버전에서는 엔터프라이즈 관련 문의가 올 수 있도록 유도를 해야했습니다. 사용성에 좋게 배치하기 위해 Floating Action Button 을 도입 제안하였고 쉽게 접근할 수 있도록 하여 액션을 취할 수 있도록 했습니다.
        그 결과 다양한 문의와 비즈니스 요청을 효율적으로 관리할 수 있었고, Floating Action Button 배치가 핵심 기능을 방해하지 않으면서 사용자가 필요할 때 액션을 빠르게 취할 수 있도록 유도할 수 있었습니다.

  - title: 사용자 설정 및 크레딧, 결제 내역 등의 기능 개발
    contents:
      - 사용자의 계정 설정, 크레딧 충전 및 사용 내역, 결제 내역을 관리할 수 있는 페이지를 개발하였습니다. 이 과정에서 데이터의 시각화와 UI 직관성을 최우선으로 고려하였습니다.
      - 어떤 환경에서든 쉽게 파악할 수 있는 UI를 설계하고 사용자가 원하는 정보만 제공하여 쉽게 파악할 수 있도록하여 사용자들이 보다 편리하게 계정과 결제 정보를 확인하고 관리할 수 있는 환경을 제공했습니다.